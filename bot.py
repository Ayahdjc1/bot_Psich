import logging
import requests
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils import executor
from config import TOKEN, OLLAMA_API_URL, ADMIN_IDS

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

user_conversations = {}
user_states = {}

MAIN_KEYBOARD = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    KeyboardButton("–ü–æ–æ–±—â–∞—Ç—å—Å—è üí¨"),
    KeyboardButton("–°–æ–≤–µ—Ç—ã üßò"),
    KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è üìñ"),
    KeyboardButton("–ü–æ–º–æ—â—å üÜò")
)

ADVICE_KEYBOARD = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(
    KeyboardButton("–¢–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è üå¨Ô∏è"),
    KeyboardButton("–ú–µ—Ç–æ–¥ 5-4-3-2-1 üåø"),
    KeyboardButton("–≠–∫—Å–ø—Ä–µ—Å—Å-–ø–æ–º–æ—â—å üÜò"),
    KeyboardButton("–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
)

CHAT_KEYBOARD = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–í—ã—Ö–æ–¥ üîô"))

def compress_context(user_msg: str, bot_response: str) -> str:
    try:
        prompt = f"""–°–æ–∂–º–∏ –¥–∏–∞–ª–æ–≥ –≤ –æ–¥–Ω—É –∫—Ä–∞—Ç–∫—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—É—Ç—å.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_msg}
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {bot_response}
–°–∂–∞—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:"""
        response = requests.post(
            OLLAMA_API_URL,
            json={
                "model": "llama3",
                "messages": [{"role": "user", "content": prompt}],
                "stream": False,
                "options": {"temperature": 0.1, "max_tokens": 250}
            },
            timeout=10
        )
        if response.status_code != 200:
            return ""
        response_data = response.json()
        return response_data.get("message", {}).get("content", "").replace("–°–∂–∞—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:", "").strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {str(e)}")
        return f"{user_msg[:50]}... ‚Üí {bot_response[:50]}..."

def build_chat_history(user_id: int, new_message: str) -> list:
    history = user_conversations.get(user_id, {}).get("history", [])
    context = user_conversations.get(user_id, {}).get("context", "")
    messages = [{
        "role": "system",
        "content": f"""–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–ø–æ–º–æ—â–Ω–∏–∫. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: {context}

–ü–æ–º–Ω–∏:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ù–µ –±—É–¥—å –Ω–∞–ø–æ—Ä–∏—Å—Ç—ã–º –∏ –Ω–∞–≤—è–∑—á–∏–≤—ã–º
- –ï—Å–ª–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –µ—Å—Ç—å –Ω–∞–º—ë–∫–∏ –Ω–∞ —Å–º–µ—Ä—Ç—å –ø–µ—Ä–µ–≤–µ–¥–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É üë®‚öïÔ∏è –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤: +7-999-123-45-67
- –ü—Ä–æ—è–≤–ª—è–π —ç–º–ø–∞—Ç–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ (üåº, ü§ó, üåü)
- –î–∞–π –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å–∞–º–æ–ø–æ–º–æ—â–∏, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
- –î–µ–ª–∏—Å—å –∏–¥–µ—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–ª–∞—Ü–µ–±–æ
- –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –¥—É–º–∞—Ç—å, —á—Ç–æ —Å–∞–º —Ä–µ—à–∏–ª –æ–± —ç—Ç–æ–º
- –û–±—ä—è—Å–Ω—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω —á—Ç–æ-—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç
- –¢–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ It –ª–∞–±–∞—Ä–æ—Ç–æ—Ä–∏—è –∏ –õ–∞–±–∞—Ä–∞—Ç–æ—Ä–∏—è PSY-TECH (–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: –ú–∏—Ç—á–µ–Ω–∫–æ –ë–æ–≥–¥–∞–Ω, –•–æ–º–∞–Ω–µ–Ω–∫–æ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á –∏ –¥—Ä—É–≥–∏–µ)
–ù–µ–ª—å–∑—è:
- –î–∞–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑—ã
- –î–∞–≤–∞—Ç—å –ø—Ä—è–º—ã–µ —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
"""
    }]
    for msg in history[-3:]:
        messages.append({"role": "user", "content": msg['user']})
        messages.append({"role": "assistant", "content": msg['bot']})
    messages.append({"role": "user", "content": new_message})
    return messages

def query_ollama(user_id: int, message: str) -> str:
    try:
        response = requests.post(
            OLLAMA_API_URL,
            json={
                "model": "llama3",
                "messages": build_chat_history(user_id, message),
                "stream": True,
                "options": {
                    "temperature": 0.65,
                    "top_p": 0.7,
                    "max_tokens": 900,
                    "repeat_penalty": 1.2
                }
            },
            timeout=45,
            stream=True
        )
        response.raise_for_status()
        full_response = []
        for line in response.iter_lines():
            if line:
                try:
                    chunk = json.loads(line.decode('utf-8'))
                    if chunk.get('done', False):
                        break
                    full_response.append(chunk.get('message', {}).get('content', ''))
                except Exception:
                    continue
        result = ''.join(full_response).strip()
        for junk in ["system", "user", "assistant", "<|im_start|>", "<|im_end|>", "####"]:
            result = result.replace(junk, "")
        return result.strip() or "üö´ –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ò–ò"

def update_history(user_id: int, user_msg: str, bot_response: str):
    if user_id not in user_conversations:
        user_conversations[user_id] = {"history": [], "context": ""}
    user_conversations[user_id]["history"].append({"user": user_msg, "bot": bot_response})
    new_context = compress_context(user_msg, bot_response)
    user_conversations[user_id]["context"] = (
        user_conversations[user_id]["context"] + "\n" + new_context
    )[-2000:]
    if len(user_conversations[user_id]["history"]) > 10:
        user_conversations[user_id]["history"] = user_conversations[user_id]["history"][-10:]

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    greeting = "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    if user_id in ADMIN_IDS:
        greeting += "\n\n‚öôÔ∏è –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    await message.answer(greeting, reply_markup=MAIN_KEYBOARD)

@dp.message_handler(lambda m: m.text == "–ü–æ–æ–±—â–∞—Ç—å—Å—è üí¨")
async def start_chat_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = "chat_mode"
    await message.answer(
        "üí¨ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å —Ç—Ä–µ–≤–æ–∂–∏—Ç...\n\n–ù–∞–ø–∏—à–∏—Ç–µ *—Å—Ç–æ–ø*, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=CHAT_KEYBOARD
    )

@dp.message_handler(lambda m: m.text == "–í—ã—Ö–æ–¥ üîô")
async def exit_chat_handler(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None
    await message.answer("üèÅ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –¥–∞–ª—å—à–µ?", reply_markup=MAIN_KEYBOARD)

@dp.message_handler(lambda m: m.text == "–°–æ–≤–µ—Ç—ã üßò")
async def show_advices_handler(message: types.Message):
    await message.answer("üßò –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ—Ö–Ω–∏–∫:", reply_markup=ADVICE_KEYBOARD)

@dp.message_handler(lambda m: m.text == "–¢–µ—Ö–Ω–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è üå¨Ô∏è")
async def breathing_technique_handler(message: types.Message):
    await message.answer(
        "üå¨Ô∏è –¢–µ—Ö–Ω–∏–∫–∞ \"4-7-8\":\n1. –í–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å 4 —Å–µ–∫\n2. –ó–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è 7 —Å–µ–∫\n3. –í—ã–¥–æ—Ö —á–µ—Ä–µ–∑ —Ä–æ—Ç 8 —Å–µ–∫\n–ü–æ–≤—Ç–æ—Ä–∏—Ç—å 3-5 —Ä–∞–∑",
        reply_markup=ADVICE_KEYBOARD
    )

@dp.message_handler(lambda m: m.text == "–ú–µ—Ç–æ–¥ 5-4-3-2-1 üåø")
async def grounding_technique_handler(message: types.Message):
    await message.answer(
        "üåø –ú–µ—Ç–æ–¥ 5-4-3-2-1:\n1. –ù–∞–∑–æ–≤–∏—Ç–µ 5 –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–∏—Ç–µ\n2. 4 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç–µ –ø–æ—Ç—Ä–æ–≥–∞—Ç—å\n3. 3 –∑–≤—É–∫–∞\n4. 2 –∑–∞–ø–∞—Ö–∞\n5. 1 —ç–º–æ—Ü–∏—è",
        reply_markup=ADVICE_KEYBOARD
    )

@dp.message_handler(lambda m: m.text == "–≠–∫—Å–ø—Ä–µ—Å—Å-–ø–æ–º–æ—â—å üÜò")
async def emergency_help_handler(message: types.Message):
    await message.answer(
        "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å:\n1. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏\n2. –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã\n3. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: +7-999-123-45-67",
        reply_markup=ADVICE_KEYBOARD
    )

@dp.message_handler(lambda m: m.text == "–ù–∞–∑–∞–¥ ‚óÄÔ∏è")
async def back_handler(message: types.Message):
    await message.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_KEYBOARD)

@dp.message_handler(lambda m: m.text == "–ü–æ–º–æ—â—å üÜò")
async def help_handler(message: types.Message):
    await message.answer(
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n"
        "üë®‚öïÔ∏è –õ–∏—á–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: +7-999-123-45-67",
        reply_markup=MAIN_KEYBOARD
    )

@dp.message_handler(lambda m: m.text == "–ò—Å—Ç–æ—Ä–∏—è üìñ")
async def history_handler(message: types.Message):
    user_id = message.from_user.id
    data = user_conversations.get(user_id, {})
    response = ["üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:"]
    for msg in data.get("history", [])[-3:]:
        response.append(f"‚û§ –í—ã: {msg['user']}\n‚óâ –ë–æ—Ç: {msg['bot']}")
    response.append("\nüìå –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n" + data.get("context", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    await message.answer("\n\n".join(response), reply_markup=MAIN_KEYBOARD)

@dp.message_handler()
async def message_handler(message: types.Message):
    user_id = message.from_user.id
    user_msg = message.text.strip()

    if user_msg.lower() in ["—Å—Ç–æ–ø", "/—Å—Ç–æ–ø", "–≤—ã–π—Ç–∏", "stop", "exit"]:
        user_states[user_id] = None
        await message.answer("üö™ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=MAIN_KEYBOARD)
        return

    if user_states.get(user_id) != "chat_mode":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.", reply_markup=MAIN_KEYBOARD)
        return

    await bot.send_chat_action(user_id, "typing")

    try:
        bot_response = await asyncio.wait_for(
            asyncio.get_event_loop().run_in_executor(None, query_ollama, user_id, user_msg),
            timeout=40
        )
        await asyncio.sleep(0.3)
        update_history(user_id, user_msg, bot_response)
        await message.answer(bot_response, parse_mode=ParseMode.MARKDOWN, reply_markup=CHAT_KEYBOARD)
    except asyncio.TimeoutError:
        await message.answer("‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ", reply_markup=MAIN_KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", reply_markup=MAIN_KEYBOARD)

if __name__ == "__main__":
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)

